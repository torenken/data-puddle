// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DataPuddleStackSnapshotTest 1`] = `
Object {
  "Outputs": Object {
    "DataPuddleEndpointDataPuddleApiEndpointEFF9FF43": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Ref": "DataPuddleEndpointDataPuddleApi13AE70D0",
            },
            ".execute-api.",
            Object {
              "Ref": "AWS::Region",
            },
            ".",
            Object {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            Object {
              "Ref": "DataPuddleEndpointDataPuddleApiDeploymentStagedev20619C45",
            },
            "/",
          ],
        ],
      },
    },
    "DataPuddleEndpointUrl550DD086": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Ref": "DataPuddleEndpointDataPuddleApi13AE70D0",
            },
            ".execute-api.",
            Object {
              "Ref": "AWS::Region",
            },
            ".",
            Object {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            Object {
              "Ref": "DataPuddleEndpointDataPuddleApiDeploymentStagedev20619C45",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": Object {
      "DependsOn": Array [
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "import boto3  # type: ignore
import json
import logging
import urllib.request

s3 = boto3.client(\\"s3\\")

EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'

CONFIGURATION_TYPES = [\\"TopicConfigurations\\", \\"QueueConfigurations\\", \\"LambdaFunctionConfigurations\\"]

def handler(event: dict, context):
  response_status = \\"SUCCESS\\"
  error_message = \\"\\"
  try:
    props = event[\\"ResourceProperties\\"]
    bucket = props[\\"BucketName\\"]
    notification_configuration = props[\\"NotificationConfiguration\\"]
    request_type = event[\\"RequestType\\"]
    managed = props.get('Managed', 'true').lower() == 'true'
    stack_id = event['StackId']

    if managed:
      config = handle_managed(request_type, notification_configuration)
    else:
      config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)

    put_bucket_notification_configuration(bucket, config)
  except Exception as e:
    logging.exception(\\"Failed to put bucket notification configuration\\")
    response_status = \\"FAILED\\"
    error_message = f\\"Error: {str(e)}. \\"
  finally:
    submit_response(event, context, response_status, error_message)

def handle_managed(request_type, notification_configuration):
  if request_type == 'Delete':
    return {}
  return notification_configuration

def handle_unmanaged(bucket, stack_id, request_type, notification_configuration):
  external_notifications = find_external_notifications(bucket, stack_id)

  if request_type == 'Delete':
    return external_notifications

  def with_id(notification):
    notification['Id'] = f\\"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}\\"
    return notification

  notifications = {}
  for t in CONFIGURATION_TYPES:
    external = external_notifications.get(t, [])
    incoming = [with_id(n) for n in notification_configuration.get(t, [])]
    notifications[t] = external + incoming

  if EVENTBRIDGE_CONFIGURATION in notification_configuration:
    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
  elif EVENTBRIDGE_CONFIGURATION in external_notifications:
    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

  return notifications

def find_external_notifications(bucket, stack_id):
  existing_notifications = get_bucket_notification_configuration(bucket)
  external_notifications = {}
  for t in CONFIGURATION_TYPES:
    external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\\"{stack_id}-\\")]

  if EVENTBRIDGE_CONFIGURATION in existing_notifications:
    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

  return external_notifications

def get_bucket_notification_configuration(bucket):
  return s3.get_bucket_notification_configuration(Bucket=bucket)

def put_bucket_notification_configuration(bucket, notification_configuration):
  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)

def submit_response(event: dict, context, response_status: str, error_message: str):
  response_body = json.dumps(
    {
      \\"Status\\": response_status,
      \\"Reason\\": f\\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\\",
      \\"PhysicalResourceId\\": event.get(\\"PhysicalResourceId\\") or event[\\"LogicalResourceId\\"],
      \\"StackId\\": event[\\"StackId\\"],
      \\"RequestId\\": event[\\"RequestId\\"],
      \\"LogicalResourceId\\": event[\\"LogicalResourceId\\"],
      \\"NoEcho\\": False,
    }
  ).encode(\\"utf-8\\")
  headers = {\\"content-type\\": \\"\\", \\"content-length\\": str(len(response_body))}
  try:
    req = urllib.request.Request(url=event[\\"ResponseURL\\"], headers=headers, data=response_body, method=\\"PUT\\")
    with urllib.request.urlopen(req) as response:
      print(response.read().decode(\\"utf-8\\"))
    print(\\"Status code: \\" + response.reason)
  except Exception as e:
      print(\\"send(..) failed executing request.urlopen(..): \\" + str(e))
",
        },
        "Description": "AWS CloudFormation handler for \\"Custom::S3BucketNotifications\\" resources (@aws-cdk/aws-s3)",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": Array [
          Object {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CrmRawBucketAllowBucketNotificationsToDataPuddleStackProvideTicketData9238688350AECAE5": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "ProvideTicketData31A1CCA1",
            "Arn",
          ],
        },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": Object {
          "Ref": "AWS::AccountId",
        },
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "CrmRawBucketB71A2A8A",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "CrmRawBucketAutoDeleteObjectsCustomResourceAD021E60": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "CrmRawBucketPolicy8DFD4AAA",
      ],
      "Properties": Object {
        "BucketName": Object {
          "Ref": "CrmRawBucketB71A2A8A",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "CrmRawBucketB71A2A8A": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "aws:kms",
              },
            },
          ],
        },
        "BucketName": "torenken-808-data-puddle-crm-raw-bucket",
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": Array [
          Object {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "CrmRawBucketNotifications357DA91D": Object {
      "DependsOn": Array [
        "CrmRawBucketAllowBucketNotificationsToDataPuddleStackProvideTicketData9238688350AECAE5",
      ],
      "Properties": Object {
        "BucketName": Object {
          "Ref": "CrmRawBucketB71A2A8A",
        },
        "Managed": true,
        "NotificationConfiguration": Object {
          "LambdaFunctionConfigurations": Array [
            Object {
              "Events": Array [
                "s3:ObjectCreated:*",
              ],
              "LambdaFunctionArn": Object {
                "Fn::GetAtt": Array [
                  "ProvideTicketData31A1CCA1",
                  "Arn",
                ],
              },
            },
          ],
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3BucketNotifications",
    },
    "CrmRawBucketPolicy8DFD4AAA": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "CrmRawBucketB71A2A8A",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::GetAtt": Array [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "CrmRawBucketB71A2A8A",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "CrmRawBucketB71A2A8A",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": Object {
      "DependsOn": Array [
        "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "350185a1069fa20a23a583e20c77f6844218bd73097902362dc94f1a108f5d89.zip",
        },
        "Description": Object {
          "Fn::Join": Array [
            "",
            Array [
              "Lambda function for auto-deleting objects in ",
              Object {
                "Ref": "CrmRawBucketB71A2A8A",
              },
              " S3 bucket.",
            ],
          ],
        },
        "Handler": "__entrypoint__.handler",
        "MemorySize": 128,
        "Role": Object {
          "Fn::GetAtt": Array [
            "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Sub": "arn:\${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DataPuddleEndpointAccessLog5378FD6E": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 90,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "DataPuddleEndpointDataPuddleApi13AE70D0": Object {
      "Properties": Object {
        "EndpointConfiguration": Object {
          "Types": Array [
            "REGIONAL",
          ],
        },
        "Name": "DataPuddleApi",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "DataPuddleEndpointDataPuddleApiAccount52487F5D": Object {
      "DeletionPolicy": "Retain",
      "DependsOn": Array [
        "DataPuddleEndpointDataPuddleApi13AE70D0",
      ],
      "Properties": Object {
        "CloudWatchRoleArn": Object {
          "Fn::GetAtt": Array [
            "DataPuddleEndpointDataPuddleApiCloudWatchRole1EA79B5B",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "DataPuddleEndpointDataPuddleApiApiMetrics4xAlarmCBED819F": Object {
      "Properties": Object {
        "AlarmActions": Array [
          Object {
            "Ref": "TechnicalNotification33611BF6",
          },
        ],
        "AlarmName": "DataPuddleApiMetrics4xAlarm",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": Array [
          Object {
            "Name": "ApiName",
            "Value": "DataPuddleApi",
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "4XXError",
        "Namespace": "AWS/ApiGateway",
        "Period": 300,
        "Statistic": "Sum",
        "Threshold": 3,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "DataPuddleEndpointDataPuddleApiApiMetrics5xAlarm3E176354": Object {
      "Properties": Object {
        "AlarmActions": Array [
          Object {
            "Ref": "TechnicalNotification33611BF6",
          },
        ],
        "AlarmName": "DataPuddleApiMetrics5xAlarm",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": Array [
          Object {
            "Name": "ApiName",
            "Value": "DataPuddleApi",
          },
        ],
        "EvaluationPeriods": 2,
        "MetricName": "5XXError",
        "Namespace": "AWS/ApiGateway",
        "Period": 60,
        "Statistic": "Sum",
        "Threshold": 1,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "DataPuddleEndpointDataPuddleApiCloudWatchRole1EA79B5B": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "DataPuddleEndpointDataPuddleApiDataPuddleApiKey91CC8425": Object {
      "Properties": Object {
        "Enabled": true,
      },
      "Type": "AWS::ApiGateway::ApiKey",
    },
    "DataPuddleEndpointDataPuddleApiDataPuddleUsagePlan621D283F": Object {
      "Properties": Object {
        "ApiStages": Array [
          Object {
            "ApiId": Object {
              "Ref": "DataPuddleEndpointDataPuddleApi13AE70D0",
            },
            "Stage": Object {
              "Ref": "DataPuddleEndpointDataPuddleApiDeploymentStagedev20619C45",
            },
            "Throttle": Object {},
          },
        ],
        "Throttle": Object {
          "BurstLimit": 5,
          "RateLimit": 10,
        },
      },
      "Type": "AWS::ApiGateway::UsagePlan",
    },
    "DataPuddleEndpointDataPuddleApiDataPuddleUsagePlanUsagePlanKeyResourceDataPuddleStackDataPuddleEndpointDataPuddleApiDataPuddleApiKeyF0B4DDE277828F99": Object {
      "Properties": Object {
        "KeyId": Object {
          "Ref": "DataPuddleEndpointDataPuddleApiDataPuddleApiKey91CC8425",
        },
        "KeyType": "API_KEY",
        "UsagePlanId": Object {
          "Ref": "DataPuddleEndpointDataPuddleApiDataPuddleUsagePlan621D283F",
        },
      },
      "Type": "AWS::ApiGateway::UsagePlanKey",
    },
    "DataPuddleEndpointDataPuddleApiDeployment50A8ECC0f11d11453206528bf1d4257c47cff390": Object {
      "DependsOn": Array [
        "DataPuddleEndpointDataPuddleApidatalake18CC9F45",
        "DataPuddleEndpointDataPuddleApidatalaketicketexportGET79152938",
        "DataPuddleEndpointDataPuddleApidatalaketicketexportFF05237F",
        "DataPuddleEndpointDataPuddleApidatalaketicketE0C6FAC7",
      ],
      "Properties": Object {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": Object {
          "Ref": "DataPuddleEndpointDataPuddleApi13AE70D0",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "DataPuddleEndpointDataPuddleApiDeploymentStagedev20619C45": Object {
      "DependsOn": Array [
        "DataPuddleEndpointDataPuddleApiAccount52487F5D",
      ],
      "Properties": Object {
        "AccessLogSetting": Object {
          "DestinationArn": Object {
            "Fn::GetAtt": Array [
              "DataPuddleEndpointAccessLog5378FD6E",
              "Arn",
            ],
          },
          "Format": "{\\"requestId\\":\\"$context.requestId\\",\\"ip\\":\\"$context.identity.sourceIp\\",\\"user\\":\\"$context.identity.user\\",\\"caller\\":\\"$context.identity.caller\\",\\"requestTime\\":\\"$context.requestTime\\",\\"httpMethod\\":\\"$context.httpMethod\\",\\"resourcePath\\":\\"$context.resourcePath\\",\\"status\\":\\"$context.status\\",\\"protocol\\":\\"$context.protocol\\",\\"responseLength\\":\\"$context.responseLength\\"}",
        },
        "DeploymentId": Object {
          "Ref": "DataPuddleEndpointDataPuddleApiDeployment50A8ECC0f11d11453206528bf1d4257c47cff390",
        },
        "MethodSettings": Array [
          Object {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "ResourcePath": "/*",
            "ThrottlingBurstLimit": 5,
            "ThrottlingRateLimit": 10,
          },
        ],
        "RestApiId": Object {
          "Ref": "DataPuddleEndpointDataPuddleApi13AE70D0",
        },
        "StageName": "dev",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "DataPuddleEndpointDataPuddleApidatalake18CC9F45": Object {
      "Properties": Object {
        "ParentId": Object {
          "Fn::GetAtt": Array [
            "DataPuddleEndpointDataPuddleApi13AE70D0",
            "RootResourceId",
          ],
        },
        "PathPart": "datalake",
        "RestApiId": Object {
          "Ref": "DataPuddleEndpointDataPuddleApi13AE70D0",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "DataPuddleEndpointDataPuddleApidatalaketicketE0C6FAC7": Object {
      "Properties": Object {
        "ParentId": Object {
          "Ref": "DataPuddleEndpointDataPuddleApidatalake18CC9F45",
        },
        "PathPart": "ticket",
        "RestApiId": Object {
          "Ref": "DataPuddleEndpointDataPuddleApi13AE70D0",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "DataPuddleEndpointDataPuddleApidatalaketicketexportFF05237F": Object {
      "Properties": Object {
        "ParentId": Object {
          "Ref": "DataPuddleEndpointDataPuddleApidatalaketicketE0C6FAC7",
        },
        "PathPart": "export",
        "RestApiId": Object {
          "Ref": "DataPuddleEndpointDataPuddleApi13AE70D0",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "DataPuddleEndpointDataPuddleApidatalaketicketexportGET79152938": Object {
      "Properties": Object {
        "ApiKeyRequired": true,
        "AuthorizationScopes": Array [
          "datapuddle/ticket-export-url",
        ],
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": Object {
          "Ref": "DataPuddleEndpointDataPuddleUserPoolAuthorizer2542990B",
        },
        "HttpMethod": "GET",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "DataPuddleEndpointProvideTicketUrlFuncC1FDC52E",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "DataPuddleEndpointDataPuddleApidatalaketicketexportFF05237F",
        },
        "RestApiId": Object {
          "Ref": "DataPuddleEndpointDataPuddleApi13AE70D0",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DataPuddleEndpointDataPuddleApidatalaketicketexportGETApiPermissionDataPuddleStackDataPuddleEndpointDataPuddleApi4DED3267GETdatalaketicketexport6F9149E3": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DataPuddleEndpointProvideTicketUrlFuncC1FDC52E",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DataPuddleEndpointDataPuddleApi13AE70D0",
              },
              "/",
              Object {
                "Ref": "DataPuddleEndpointDataPuddleApiDeploymentStagedev20619C45",
              },
              "/GET/datalake/ticket/export",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DataPuddleEndpointDataPuddleApidatalaketicketexportGETApiPermissionTestDataPuddleStackDataPuddleEndpointDataPuddleApi4DED3267GETdatalaketicketexportD289E9A0": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DataPuddleEndpointProvideTicketUrlFuncC1FDC52E",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DataPuddleEndpointDataPuddleApi13AE70D0",
              },
              "/test-invoke-stage/GET/datalake/ticket/export",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DataPuddleEndpointDataPuddleUserPool04AE47FE": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "AccountRecoverySetting": Object {
          "RecoveryMechanisms": Array [
            Object {
              "Name": "verified_phone_number",
              "Priority": 1,
            },
            Object {
              "Name": "verified_email",
              "Priority": 2,
            },
          ],
        },
        "AdminCreateUserConfig": Object {
          "AllowAdminCreateUserOnly": true,
        },
        "EmailVerificationMessage": "The verification code to your new account is {####}",
        "EmailVerificationSubject": "Verify your new account",
        "SmsVerificationMessage": "The verification code to your new account is {####}",
        "VerificationMessageTemplate": Object {
          "DefaultEmailOption": "CONFIRM_WITH_CODE",
          "EmailMessage": "The verification code to your new account is {####}",
          "EmailSubject": "Verify your new account",
          "SmsMessage": "The verification code to your new account is {####}",
        },
      },
      "Type": "AWS::Cognito::UserPool",
      "UpdateReplacePolicy": "Delete",
    },
    "DataPuddleEndpointDataPuddleUserPoolAuthorizer2542990B": Object {
      "Properties": Object {
        "IdentitySource": "method.request.header.Authorization",
        "Name": "DataPuddleStackDataPuddleEndpointDataPuddleUserPoolAuthorizerCFC0A550",
        "ProviderARNs": Array [
          Object {
            "Fn::GetAtt": Array [
              "DataPuddleEndpointDataPuddleUserPool04AE47FE",
              "Arn",
            ],
          },
        ],
        "RestApiId": Object {
          "Ref": "DataPuddleEndpointDataPuddleApi13AE70D0",
        },
        "Type": "COGNITO_USER_POOLS",
      },
      "Type": "AWS::ApiGateway::Authorizer",
    },
    "DataPuddleEndpointDataPuddleUserPoolDataPuddleResourceServer35E6E20B": Object {
      "Properties": Object {
        "Identifier": "datapuddle",
        "Name": "datapuddle",
        "Scopes": Array [
          Object {
            "ScopeDescription": "provide url for ticket export",
            "ScopeName": "ticket-export-url",
          },
        ],
        "UserPoolId": Object {
          "Ref": "DataPuddleEndpointDataPuddleUserPool04AE47FE",
        },
      },
      "Type": "AWS::Cognito::UserPoolResourceServer",
    },
    "DataPuddleEndpointDataPuddleUserPoolDataPuddleUserPoolDomainC67A6C2C": Object {
      "Properties": Object {
        "Domain": "datapuddle",
        "UserPoolId": Object {
          "Ref": "DataPuddleEndpointDataPuddleUserPool04AE47FE",
        },
      },
      "Type": "AWS::Cognito::UserPoolDomain",
    },
    "DataPuddleEndpointDataPuddleUserPoolTicketExportUserPoolClient0F5CBABE": Object {
      "Properties": Object {
        "AllowedOAuthFlows": Array [
          "client_credentials",
        ],
        "AllowedOAuthFlowsUserPoolClient": true,
        "AllowedOAuthScopes": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Ref": "DataPuddleEndpointDataPuddleUserPoolDataPuddleResourceServer35E6E20B",
                },
                "/ticket-export-url",
              ],
            ],
          },
        ],
        "GenerateSecret": true,
        "SupportedIdentityProviders": Array [
          "COGNITO",
        ],
        "UserPoolId": Object {
          "Ref": "DataPuddleEndpointDataPuddleUserPool04AE47FE",
        },
      },
      "Type": "AWS::Cognito::UserPoolClient",
    },
    "DataPuddleEndpointProvideTicketUrlFuncC1FDC52E": Object {
      "DependsOn": Array [
        "DataPuddleEndpointProvideTicketUrlFuncServiceRoleDefaultPolicy635F0132",
        "DataPuddleEndpointProvideTicketUrlFuncServiceRoleF35412BB",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "134dd3976a779a43897b0d6e38a6d589e224933f1485899f2317459c0263aaa7.zip",
        },
        "Environment": Object {
          "Variables": Object {
            "TICKET_BUCKET_NAME": Object {
              "Ref": "TicketOutputBucketD3B5E3FA",
            },
          },
        },
        "FunctionName": "data-puddle-provide-ticket-url",
        "Handler": "bootstrap",
        "MemorySize": 1024,
        "Role": Object {
          "Fn::GetAtt": Array [
            "DataPuddleEndpointProvideTicketUrlFuncServiceRoleF35412BB",
            "Arn",
          ],
        },
        "Runtime": "provided.al2",
      },
      "Type": "AWS::Lambda::Function",
    },
    "DataPuddleEndpointProvideTicketUrlFuncLogRetention3309ACC3": Object {
      "Properties": Object {
        "LogGroupName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/aws/lambda/",
              Object {
                "Ref": "DataPuddleEndpointProvideTicketUrlFuncC1FDC52E",
              },
            ],
          ],
        },
        "RetentionInDays": 90,
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
            "Arn",
          ],
        },
      },
      "Type": "Custom::LogRetention",
    },
    "DataPuddleEndpointProvideTicketUrlFuncServiceRoleDefaultPolicy635F0132": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "TicketOutputBucketD3B5E3FA",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "TicketOutputBucketD3B5E3FA",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DataPuddleEndpointProvideTicketUrlFuncServiceRoleDefaultPolicy635F0132",
        "Roles": Array [
          Object {
            "Ref": "DataPuddleEndpointProvideTicketUrlFuncServiceRoleF35412BB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DataPuddleEndpointProvideTicketUrlFuncServiceRoleF35412BB": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DataPuddleSecretECC83D0A": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "SecretString": "{\\"secretStringValue\\":\\"Add a 32bit encryption key as base64 encoding later\\"}",
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A": Object {
      "DependsOn": Array [
        "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
        "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "5fa1330271b8967d9254ba2d4a07144f8acefe8b77e6d6bba38261373a50d5f8.zip",
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:PutRetentionPolicy",
                "logs:DeleteRetentionPolicy",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
        "Roles": Array [
          Object {
            "Ref": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ProvideTicketData31A1CCA1": Object {
      "DependsOn": Array [
        "ProvideTicketDataServiceRoleDefaultPolicy955DFE27",
        "ProvideTicketDataServiceRole6988794D",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "bd708367433659d2a27456d722514ef9dc79319d209306b017f2c03db38ab721.zip",
        },
        "Environment": Object {
          "Variables": Object {
            "CRM_RAW_BUCKET": Object {
              "Ref": "CrmRawBucketB71A2A8A",
            },
            "SECRET_STORE_ARM": Object {
              "Ref": "DataPuddleSecretECC83D0A",
            },
            "TICKET_SYS_OUT_BUCKET": Object {
              "Ref": "TicketOutputBucketD3B5E3FA",
            },
          },
        },
        "FunctionName": "data-puddle-provide-ticket-data",
        "Handler": "bootstrap",
        "MemorySize": 1024,
        "Role": Object {
          "Fn::GetAtt": Array [
            "ProvideTicketDataServiceRole6988794D",
            "Arn",
          ],
        },
        "Runtime": "provided.al2",
      },
      "Type": "AWS::Lambda::Function",
    },
    "ProvideTicketDataLogRetention984045E2": Object {
      "Properties": Object {
        "LogGroupName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/aws/lambda/",
              Object {
                "Ref": "ProvideTicketData31A1CCA1",
              },
            ],
          ],
        },
        "RetentionInDays": 90,
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
            "Arn",
          ],
        },
      },
      "Type": "Custom::LogRetention",
    },
    "ProvideTicketDataServiceRole6988794D": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ProvideTicketDataServiceRoleDefaultPolicy955DFE27": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "CrmRawBucketB71A2A8A",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "CrmRawBucketB71A2A8A",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "TicketOutputBucketD3B5E3FA",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "TicketOutputBucketD3B5E3FA",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DataPuddleSecretECC83D0A",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ProvideTicketDataServiceRoleDefaultPolicy955DFE27",
        "Roles": Array [
          Object {
            "Ref": "ProvideTicketDataServiceRole6988794D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "TechnicalNotification33611BF6": Object {
      "Type": "AWS::SNS::Topic",
    },
    "TechnicalNotificationtestexamplecom77EDB6E1": Object {
      "Properties": Object {
        "Endpoint": "test@example.com",
        "Protocol": "email",
        "TopicArn": Object {
          "Ref": "TechnicalNotification33611BF6",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "TicketOutputBucketAutoDeleteObjectsCustomResource164DB626": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "TicketOutputBucketPolicy71764C69",
      ],
      "Properties": Object {
        "BucketName": Object {
          "Ref": "TicketOutputBucketD3B5E3FA",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "TicketOutputBucketD3B5E3FA": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "aws:kms",
              },
            },
          ],
        },
        "BucketName": "torenken-808-data-puddle-ticket-bucket",
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": Array [
          Object {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "TicketOutputBucketPolicy71764C69": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "TicketOutputBucketD3B5E3FA",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::GetAtt": Array [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "TicketOutputBucketD3B5E3FA",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "TicketOutputBucketD3B5E3FA",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
